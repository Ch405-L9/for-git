Add a New Section (Example: Services or About Us) – Use this prompt to insert a completely new content section into the site. The AI will generate the React component, update navigation, and ensure styling matches the theme.

Prompt: “Our site needs an About Us section added. Create a new About.tsx in src/components/sections featuring a heading and a short company bio, plus team photos of 3 key members. Use a similar style to the Hero/Services sections (same font and color scheme). Make it responsive: on desktop, show the three team member cards in a row with their photo (use placeholder images via Cloudinary) and name/title; on mobile, stack them. Ensure each image has descriptive alt text (e.g. person’s name) for accessibility
imensosoftware.com
. Give the section an id "about" and add an “About Us” link to the Header nav that scrolls to this section. Maintain all performance best practices – e.g. load images from Cloudinary (do not import large images locally), and keep layout mobile-friendly. If any aspect of this addition could hurt our Lighthouse scores or violate WCAG standards, please point it out before proceeding.”

What this does: In one go, this prompt asks the AI to generate a new section component (About.tsx) complete with content and styling. It explicitly mentions using Cloudinary for images and alt text for accessibility, so the AI will follow the established pattern (likely adding entries in cloudinary.ts for the team images or using existing placeholders). It also reminds the AI to update the header navigation to include the new section (preventing a “dead end” page – a navigation best practice
Google Drive
). The prompt’s last line instructs the AI to warn if something would interfere with performance or compliance – for example, if the images were too large or if three images in a row need lazy-loading, the AI might respond with a note about it. This way, the user stays informed of any trade-offs.

🎨 Adjust Color Scheme or Typography – This prompt helps restyle the site’s global look while preserving accessibility.

Prompt: “Switch the site to a dark theme. Update global styles so that the background is dark (near #121212) and text is light. Modify src/styles/fonts.css: define new CSS variables for dark theme (e.g. --color-bg: #121212, --color-text: #f0f0f0). Ensure all components reflect this (e.g. header, footer backgrounds to dark, text to light). Maintain AA contrast or better – if any text becomes hard to read, adjust the color to meet contrast guidelines
imensosoftware.com
 (e.g. link colors should be slightly lighter than the body text if on dark background). Also, change the accent color to match the new aesthetic (maybe a bright blue or orange for buttons). Do not hard-code colors in components; use the CSS variables so the design remains consistent. Additionally, update typography if needed: for example, if the current font doesn’t read well on dark, consider a sans-serif for body text (ensure it’s loaded as WOFF2 and included in @font-face with swap). Before applying, double-check that these changes won’t drop our Lighthouse scores (especially check if prefers-color-scheme meta or any other tweak is needed for best practices). Finally, provide a summary of what was changed.”

What this does: This prompt directs the AI to perform a theme overhaul. It explicitly mentions maintaining contrast (to preserve accessibility) and using our existing CSS variable system to propagate colors (for efficiency and consistency). By focusing on fonts.css and variables, we avoid the AI going through each component blindly – instead it will likely output the diff or new content for the CSS and any necessary component tweaks (like adding a CSS class to body, etc.). It also nods to potential Lighthouse considerations (for example, a dark theme itself isn’t an issue, but we ensure nothing like missing meta theme-color or other details are overlooked). The AI might respond with the modified CSS and any notes. The user gets a safe theme change without manually editing dozens of places, and with the confidence that contrast was checked against standards (e.g. white (#fff) on #121212 has a contrast ratio > 21:1, which is well above WCAG AA). This is a professional-grade prompt that yields a cohesive result, not just a superficial color swap.

📐 Reposition or Resize Elements – Use this to fine-tune the layout, such as moving something or changing dimensions, while keeping responsiveness.

Prompt: “Reconfigure the Hero section layout: I want the hero text aligned to the left instead of centered. Also, add a background image to the Hero section for visual impact. Use background-image CSS with a suitable placeholder image (from Cloudinary, something like a city skyline). Apply a semi-transparent dark overlay if needed to ensure white text is readable on the image. Increase the hero’s vertical padding so it occupies almost full screen on desktop (maybe 90vh). On mobile, ensure the image still looks good (center the focal point) and text remains on screen without requiring scroll. Implement this by editing Hero.tsx and related styles – do not break the mobile view. After making the changes, confirm that the Lighthouse accessibility score remains high (e.g., check that the overlay does not reduce text contrast, and the image has alt="" since it’s decorative). Provide the updated code for Hero.tsx (and any CSS needed) as the output.”

What this does: This prompt is specific: it asks for a left-aligned hero with a background image. It reminds the AI about accessibility (text over image -> use overlay for contrast, decorative background image -> empty alt or CSS background so it doesn’t need alt). It also addresses responsiveness (different behavior on mobile). The AI will likely output a modified Hero component code, adjusting inline styles or classes to left-align content and include a background via style or a new CSS rule. By explicitly stating the constraints, we avoid common pitfalls like text becoming unreadable or layout breaking on small screens. The mention of checking Lighthouse ensures the AI will be cautious about contrast and maybe mention any ARIA roles if needed. This kind of prompt allows a surgical layout change without losing sight of best practices.

🗂️ Add a Navigation Item / Page – When the user wants to add a new link in the menu or even a new page, use a prompt like this. (Our base structure is a single-page app with sections, but the nav could also link out or trigger modals.)

Prompt: “Add a new “Blog” item to the site’s navigation. This will link to an external blog page. Update the Header component to include a “Blog” link (the URL can be a placeholder like /blog for now). Ensure the styling (font, spacing) of this new nav item matches the existing ones. Since this link goes to a separate page, it should use a normal <a href="/blog"> (which will cause a full page load). Also, in the Footer, add a similar “Blog” link under a useful section (maybe in a list of quick links). Ensure these additions follow the same styling and that hover/focus states are consistent. Important: verify that adding this link doesn’t disrupt the responsive layout of the header (e.g., if the nav was centered or spaced, adjust CSS if needed so it still looks good with an extra item). Provide the updated Header.tsx and Footer.tsx code showing the new link integrated. If any additional setup is needed (like a dummy Blog.tsx page or route), mention it.”

What this does: It instructs the AI to simply add a new nav link. This is straightforward, but we also ask it to consider layout (maybe our header uses flex space-between, so one extra item might be fine; if it were a tight inline list, maybe spacing needed). By also adding it to the footer, we maintain redundant navigation (a usability plus). The AI will output the small changes to the Header and Footer components. This prompt shows that even simple tasks are framed with attention to consistency and responsiveness.

🔍 Perform an Accessibility & Performance Audit – This prompt asks the AI to analyze the current site code for any issues. While an AI can’t run Lighthouse or a real audit, it can heuristically check the code against known best practices. This is a useful “double-check” after numerous changes.

Prompt: “Review our project for any accessibility or performance issues. Go through each component and config file and identify if anything might lower our Lighthouse scores or violate WCAG 2.1 AA standards. For example, check for: missing alt attributes on <img> tags, adequate color contrast in CSS (maybe mention our main text color contrast ratio), proper aria labels where needed (e.g. if we have an icon-only button, does it have aria-label?), and that no huge images are being loaded without optimization. Also verify our performance setup: are we preloading fonts correctly? Is the compression plugin configured? Identify any potential problem and suggest a fix. Output a short report with findings. If everything looks good, state that explicitly.”

What this does: It triggers the AI to act like a reviewer. Given the code (which it has context for from prior prompts, presumably), it can list out checks. For instance, it might “remember” that we added a background image and ensure we did mark it decorative. Or it might notice if a link missing noopener noreferrer for external (security best practice). The prompt guides it on specific things to look for, all of which are known factors in Lighthouse/WCAG. The output would be a list of any issues found or a confirmation that all is well. This is a great prompt to use before finalizing a project or after heavy modifications, to ensure our high standards remain met. It effectively bakes in a QA step powered by the AI.
